// Code generated by cmd/generate/main.go; DO NOT EDIT.
package generated

import (
	"github.com/graphql-go/graphql"
	"query-service/core"

)

var QueryFields graphql.Fields


// Declarations for the custom type and its WhereInput type
var UsersType *graphql.Object
var UsersWhereInputType *graphql.InputObject

// Declarations for the custom type and its WhereInput type
var PostType *graphql.Object
var PostWhereInputType *graphql.InputObject


func init() {
	
	UsersType = graphql.NewObject(graphql.ObjectConfig{
		Name: "Users",
		Fields: graphql.FieldsThunk(func() graphql.Fields {
			return graphql.Fields{
				"id": &graphql.Field{Type: graphql.ID},"name": &graphql.Field{Type: graphql.String},"posts": &graphql.Field{Type: graphql.NewList(PostType)},
			}
		}),
	})
	UsersWhereInputType = graphql.NewInputObject(graphql.InputObjectConfig{
		Name: "UsersWhereInput",
		Fields: graphql.InputObjectConfigFieldMap{
			"id": &graphql.InputObjectFieldConfig{Type: graphql.String},"name": &graphql.InputObjectFieldConfig{Type: graphql.String},"posts": &graphql.InputObjectFieldConfig{Type: graphql.String},
		},
	})
	
	PostType = graphql.NewObject(graphql.ObjectConfig{
		Name: "Post",
		Fields: graphql.FieldsThunk(func() graphql.Fields {
			return graphql.Fields{
				"id": &graphql.Field{Type: graphql.ID},"title": &graphql.Field{Type: graphql.String},"content": &graphql.Field{Type: graphql.String},"author": &graphql.Field{Type: UsersType},
			}
		}),
	})
	PostWhereInputType = graphql.NewInputObject(graphql.InputObjectConfig{
		Name: "PostWhereInput",
		Fields: graphql.InputObjectConfigFieldMap{
			"id": &graphql.InputObjectFieldConfig{Type: graphql.String},"title": &graphql.InputObjectFieldConfig{Type: graphql.String},"content": &graphql.InputObjectFieldConfig{Type: graphql.String},"author": &graphql.InputObjectFieldConfig{Type: graphql.String},
		},
	})
	

	// Build the QueryFields map with two queries per entity.
	// For each entity, one query for find-one (by ID) and one for find-many.
	QueryFields = graphql.Fields{
		
		"Users": &graphql.Field{
			Type: UsersType,
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{Type: graphql.NewNonNull(graphql.ID)},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return core.ResolveSingle("Users", p)
			},
		},
		"Userss": &graphql.Field{
			Type: graphql.NewList(UsersType),
			Args: graphql.FieldConfigArgument{
				"page":  &graphql.ArgumentConfig{Type: graphql.Int},
				"limit": &graphql.ArgumentConfig{Type: graphql.Int},
				"order": &graphql.ArgumentConfig{Type: graphql.String},
				"where": &graphql.ArgumentConfig{Type: UsersWhereInputType},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return core.ResolveMultiple("Users", p)
			},
		},
		
		"Post": &graphql.Field{
			Type: PostType,
			Args: graphql.FieldConfigArgument{
				"id": &graphql.ArgumentConfig{Type: graphql.NewNonNull(graphql.ID)},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return core.ResolveSingle("Post", p)
			},
		},
		"Posts": &graphql.Field{
			Type: graphql.NewList(PostType),
			Args: graphql.FieldConfigArgument{
				"page":  &graphql.ArgumentConfig{Type: graphql.Int},
				"limit": &graphql.ArgumentConfig{Type: graphql.Int},
				"order": &graphql.ArgumentConfig{Type: graphql.String},
				"where": &graphql.ArgumentConfig{Type: PostWhereInputType},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return core.ResolveMultiple("Post", p)
			},
		},
		
	}
}
